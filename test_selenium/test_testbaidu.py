# Generated by Selenium IDE
import pytest
import time

import yaml
from selenium import webdriver
from selenium.webdriver.common.by import By


class Testbaidu:
    def setup_method(self, method):
        # 当没有配置环境变量到 .bash_profile就要用executable_path参数指定chromedriver的安装路径
        # self.driver = webdriver.Chrome(executable_path="/Users/aqumon/Downloads/chromedriver")
        # 当配置了环境变量到.bash_profile之后要记得重启pycharm才能生效
        self.driver = webdriver.Chrome()
        # 隐式等待是全局的，针对每一个find_element都会执行
        self.driver.implicitly_wait(5)

    def teardown_method(self, method):
        self.driver.quit()

    def test_baidu(self):
        self.driver.get("https://www.baidu.com/")
        self.driver.find_element(By.ID, "kw").click()
        self.driver.find_element(By.ID, "kw").send_keys("霍格沃兹测试学院")
        self.driver.find_element(By.ID, "su").click()
        self.driver.find_element(By.LINK_TEXT, "霍格沃兹测试学院 – 测试开发工程师的黄埔军校").click()
        # 以下代码找不到元素?
        # self.driver.find_element_by_id("menu-item-679").click()


# 复用浏览器，先在终端执行命令（没有配置环境变量，任意路径下可执行的命令）：
# mac：/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222
# 该命令会打开一个空白的谷歌浏览器，在浏览器地址栏中输入127.0.0.1:127,没有报错就说明成功开启了一个远程的复用浏览器
def test_wework():
    # 调用chromeoptions方法
    opt = webdriver.ChromeOptions()
    # 设置复用浏览器的地址
    opt.debugger_address = "127.0.0.1:9222"
    driver = webdriver.Chrome(options=opt)
    driver.implicitly_wait(5)
    # 开启一个已经打开的页面，比如企业微信首页，由于企业微信需要扫码登录，所以当driver驱动浏览器开启微信登录页面时，
    # 需要手动在页面上扫码登录，当页面已经打开后，后面就可以注释掉这个打开页面的代码
    # 如果执行代码前，页面已经登录企业微信，下面的操作也会让企业微信进入 首页 地址，再点击进入 通讯录菜单
    driver.get("https://work.weixin.qq.com/wework_admin/frame")
    driver.find_element_by_id("menu_contacts").click()
    time.sleep(3)
    driver.quit()


# 上面微信需要扫码登录，每次运行脚本都需要手动扫码，不方便
# 通过存储cookies绕过扫码登录，cookies是有时效性的，有的为一天，
# 有的一周，一年的都有，实效短的不适合用cookies登录
def test_get_cookie():
    opt = webdriver.ChromeOptions()
    opt.debugger_address = "127.0.0.1:9222"
    driver = webdriver.Chrome(options=opt)
    driver.implicitly_wait(5)
    # 拷贝了上面复用浏览器的操作，复用是登录状态的所以不需要下面打开页面的操作，
    # 可以用driver.get_cookies()获取cookies，用driver.get_cookie()会报错？
    # driver.get("https://work.weixin.qq.com/wework_admin/frame")
    print(driver.get_cookies())


# 使用cookies登录
def test_login():
    driver = webdriver.Chrome()
    # 为了使浏览器获得一个域名，无登录cookies信息的页面，所以使用企业微信的登录地址
    driver.get("https://work.weixin.qq.com/wework_admin/loginpage_wx")
    cookies = [{'domain': '.work.weixin.qq.com', 'httpOnly': False, 'name': 'wwrtx.vid', 'path': '/', 'secure': False,
                'value': '1688853987811070'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': True, 'name': 'wwrtx.vst', 'path': '/', 'secure': False,
                'value': 'rO3LMou9jxNRuUwM1TXw0e3fVNRHgzOtGsQLw-gBeyBDTYLPNS3pzb0EBHWuCa_0_SNh5sC7mLdbq9NHjtx71HSSrxXUOWHlTvMRT8WewFdWTCwsjIg8FeXXoGs6qF_F4lyj2AlHfK0R7gAsaKI664tpUsvpKwUwvxMjnFbvfbFBCKrv3mxqGdVmmSVY2BST3iPurcGirft-aiag-YzwWXM48n_OCXbKNHj4xF9ZEUIVt1tEUfhiqVxDsEykxD78ijJNlYppGZ1g8W1U1usqDA'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': False, 'name': 'wxpay.vid', 'path': '/', 'secure': False,
                'value': '1688853987811070'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': False, 'name': 'wxpay.corpid', 'path': '/',
                'secure': False, 'value': '1970325051202735'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': True, 'name': 'wwrtx.ref', 'path': '/', 'secure': False,
                'value': 'direct'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': True, 'name': 'wwrtx.ltype', 'path': '/', 'secure': False,
                'value': '1'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': False, 'name': 'wwrtx.d2st', 'path': '/', 'secure': False,
                'value': 'a6216719'},
               {'domain': 'work.weixin.qq.com', 'expiry': 1615999204, 'httpOnly': True, 'name': 'ww_rtkey', 'path': '/',
                'secure': False, 'value': '45c84kk'},
               {'domain': '.qq.com', 'expiry': 1616055288, 'httpOnly': False, 'name': '_gid', 'path': '/',
                'secure': False, 'value': 'GA1.2.555483505.1615967669'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': True, 'name': 'wwrtx.refid', 'path': '/', 'secure': False,
                'value': '03268515'},
               {'domain': '.work.weixin.qq.com', 'httpOnly': True, 'name': 'wwrtx.sid', 'path': '/', 'secure': False,
                'value': 'eqjUCLRVx7ow5N_2zXv3scJQuGzMHY-udDKC-rGA4_j8bVmOHdaUAFzsDPlmmTu-'},
               {'domain': '.qq.com', 'expiry': 1679040888, 'httpOnly': False, 'name': '_ga', 'path': '/',
                'secure': False, 'value': 'GA1.2.761111391.1615967669'},
               {'domain': '.work.weixin.qq.com', 'expiry': 1647503668, 'httpOnly': False, 'name': 'wwrtx.c_gdpr',
                'path': '/', 'secure': False, 'value': '0'},
               {'domain': '.work.weixin.qq.com', 'expiry': 1618560891, 'httpOnly': False, 'name': 'wwrtx.i18n_lan',
                'path': '/', 'secure': False, 'value': 'zh'}]
    # 在cookies中遍历找到和页面域名一致的cookie，传给selenium
    for cookie in cookies:
        driver.add_cookie(cookie)
    driver.get("https://work.weixin.qq.com/wework_admin/frame#contacts")


# cookies信息比较长，可以保存到yaml文件里面
class TestYamlGetCookie:
    def test_get_cookie1(self):
        opt = webdriver.ChromeOptions()
        opt.debugger_address = "127.0.0.1:9222"
        driver = webdriver.Chrome(options=opt)
        driver.implicitly_wait(5)
        cookies = driver.get_cookies()
        # "w"参数表示重写覆盖文件，不然每次执行都会填充数据，会造成冗余
        with open("cookie_data.yaml", "w", encoding="utf-8") as f:
            # 快捷导包：mac option+enter，win alt+enter
            # 序列化cookies，存入yaml文件
            yaml.safe_dump(cookies, f)

    def test_login1(self):
        driver = webdriver.Chrome()
        # 为了使浏览器获得一个域名，无登录cookies信息的页面，所以使用企业微信的登录地址
        driver.get("https://work.weixin.qq.com/wework_admin/loginpage_wx")
        with open("cookie_data.yaml", encoding="utf-8") as f:
            yaml_data = yaml.safe_load(f)
        # 在cookies中遍历找到和页面域名一致的cookie，传给selenium
        for cookie in yaml_data:
            driver.add_cookie(cookie)
        driver.get("https://work.weixin.qq.com/wework_admin/frame#contacts")
